<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<sqlMap namespace="COMMITMENT">

	<resultMap id="COMMITMENT_RESULT" class="com.mpower.domain.model.paymentInfo.Commitment" groupBy="id">
		<result property="id" column="COMMITMENT_ID" jdbcType="BIGINT" />
		<result property="acknowledgmentDate" column="ACKNOWLEDGMENT_DATE" jdbcType="TIMESTAMP" />
		<result property="amountPerGift" column="AMOUNT_PER_GIFT" jdbcType="DECIMAL" />
		<result property="amountTotal" column="AMOUNT_TOTAL" jdbcType="DECIMAL" />
		<result property="autoPay" column="AUTO_PAY" jdbcType="CHAR" />
		<result property="checkNumber" column="CHECK_NUMBER" jdbcType="INTEGER" />
		<result property="comments" column="COMMENTS" jdbcType="VARCHAR" />
		<result property="commitmentType" column="COMMITMENT_TYPE" jdbcType="VARCHAR" />
		<result property="createDate" column="CREATE_DATE" jdbcType="TIMESTAMP" />
		<result property="currencyCode" column="CURRENCY_CODE" jdbcType="VARCHAR" />
		<result property="endDate" column="END_DATE" jdbcType="TIMESTAMP" />
		<result property="frequency" column="FREQUENCY" jdbcType="VARCHAR" />
		<result property="lastEntryDate" column="LAST_ENTRY_DATE" jdbcType="TIMESTAMP" />
		<result property="notes" column="NOTES" jdbcType="VARCHAR" />
		<result property="paymentType" column="PAYMENT_TYPE" jdbcType="VARCHAR" />
		<result property="pledgeCancelDate" column="PLEDGE_CANCEL_DATE"	jdbcType="TIMESTAMP" />
		<result property="pledgeCancelReason" column="PLEDGE_CANCEL_REASON"	jdbcType="VARCHAR" />
		<result property="pledgeDate" column="PLEDGE_DATE" jdbcType="TIMESTAMP" />
		<result property="pledgeStatus" column="PLEDGE_STATUS" jdbcType="VARCHAR" />
		<result property="projectedDate" column="PROJECTED_DATE" jdbcType="TIMESTAMP" />
		<result property="recurring" column="RECURRING" jdbcType="CHAR" />
		<result property="sendAcknowledgment" column="SEND_ACKNOWLEDGMENT" jdbcType="CHAR" />
		<result property="startDate" column="START_DATE" jdbcType="TIMESTAMP" />
		<result property="status" column="STATUS" jdbcType="VARCHAR" />
		<result property="updateDate" column="UPDATE_DATE" jdbcType="TIMESTAMP" />
		<result property="address" resultMap="ADDRESS.ADDRESS_RESULT" />
		<result property="email" resultMap="EMAIL.EMAIL_RESULT" />
		<result property="paymentSource" resultMap="PAYMENT_SOURCE.PAYMENT_SOURCE_RESULT" />
		<result property="person" resultMap="CONSTITUENT.CONSTITUENT_RESULT" />
		<result property="phone" resultMap="PHONE.PHONE_RESULT" />
		<result property="distributionLines" resultMap="DISTRO_LINE.DISTRO_LINE_RESULT" />
	</resultMap>
	
	<sql id="COMMITMENT_COLS_FRAGMENT">
		c.COMMITMENT_ID, c.ACKNOWLEDGMENT_DATE, c.AMOUNT_PER_GIFT, c.AMOUNT_TOTAL, c.AUTO_PAY,
		c.CHECK_NUMBER, c.COMMENTS, c.COMMITMENT_TYPE, c.CREATE_DATE,
		c.CURRENCY_CODE, c.END_DATE, c.FREQUENCY,
		c.LAST_ENTRY_DATE, c.NOTES, c.PAYMENT_TYPE, c.PLEDGE_CANCEL_DATE,
		c.PLEDGE_CANCEL_REASON, c.PLEDGE_DATE,
		c.PLEDGE_STATUS, c.PROJECTED_DATE, c.RECURRING, c.SEND_ACKNOWLEDGMENT, c.START_DATE,
		c.STATUS, c.UPDATE_DATE
	</sql>

	<sql id="SELECT_COMMITMENT_FRAGMENT">
		select
		<include refid="COMMITMENT_COLS_FRAGMENT" />,
		<include refid="CONSTITUENT_COLS_FRAGMENT" />,
		<include refid="ADDRESS_COLS_FRAGMENT" />,
		<include refid="PHONE_COLS_FRAGMENT" />	,
		<include refid="EMAIL_COLS_FRAGMENT" />,
		<include refid="PAYMENT_SRC_COLS_FRAGMENT" />,
		<include refid="DISTRO_LINE_COLS_FRAGMENT" />

		from COMMITMENT c

		inner join PERSON p on c.PERSON_ID = p.PERSON_ID
		left outer join EMAIL e on c.EMAIL_ID = e.EMAIL_ID
		left outer join PHONE ph on c.PHONE_ID = ph.PHONE_ID
		left outer join ADDRESS addr on c.ADDRESS_ID = addr.ADDRESS_ID
		left outer join PAYMENT_SOURCE ps on c.PAYMENT_SOURCE_ID = ps.PAYMENT_SOURCE_ID
		left outer join DISTRO_LINE dl on c.COMMITMENT_ID = dl.COMMITMENT_ID

		where
		p.SITE_NAME= #siteName#
	</sql>

	<select id="SELECT_COMMITMENT_BY_ID" resultMap="COMMITMENT_RESULT" parameterClass="map">
		<include refid="SELECT_COMMITMENT_FRAGMENT" />
		and c.COMMITMENT_ID = #id#
	</select>

	<select id="SELECT_COMMITMENTS_BY_CONSTITUENT_ID_AND_TYPE" resultMap="COMMITMENT_RESULT" parameterClass="map">
		<include refid="SELECT_COMMITMENT_FRAGMENT" />
		and c.PERSON_ID = #constituentId#
		and c.COMMITMENT_TYPE = #commitmentType#
	</select>

	<statement id="SELECT_COMMITMENT_BY_SQL" resultMap="COMMITMENT_RESULT">
		$sql$
	</statement>

	<insert id="INSERT_COMMITMENT" parameterClass="com.mpower.domain.model.paymentInfo.Commitment">
		insert into COMMITMENT (ACKNOWLEDGMENT_DATE, AMOUNT_PER_GIFT, AMOUNT_TOTAL,
		AUTO_PAY, CHECK_NUMBER, COMMENTS, COMMITMENT_TYPE, CREATE_DATE, CURRENCY_CODE,
		END_DATE, FREQUENCY, LAST_ENTRY_DATE, NOTES, PAYMENT_TYPE, PLEDGE_CANCEL_DATE,
		PLEDGE_CANCEL_REASON, PLEDGE_DATE, PLEDGE_STATUS, PROJECTED_DATE, RECURRING, SEND_ACKNOWLEDGMENT,
		START_DATE,	STATUS, UPDATE_DATE, ADDRESS_ID, EMAIL_ID, PAYMENT_SOURCE_ID, PERSON_ID, PHONE_ID)
		values (#acknowledgmentDate#, #amountPerGift#,
		#amountTotal#, #autoPay#, #checkNumber#, #comments#,
		#commitmentType#, now(), #currencyCode#, #endDate#,
		#frequency#, #lastEntryDate#, #notes#, #paymentType#,
		#pledgeCancelDate#, #pledgeCancelReason#, #pledgeDate#,
		#pledgeStatus#, #projectedDate#, #recurring#, #sendAcknowledgment#,
		#startDate#, #status#, now(), #address.id#,
		#email.id#, #paymentSource.id#, #person.id#, #phone.id#)
		<selectKey keyProperty="id" resultClass="long">
			SELECT LAST_INSERT_ID() AS value
		</selectKey>
	</insert>

	<update id="UPDATE_COMMITMENT" parameterClass="com.mpower.domain.model.paymentInfo.Commitment">
		update COMMITMENT
		set ACKNOWLEDGMENT_DATE = #acknowledgmentDate#,
		AMOUNT_PER_GIFT = #amountPerGift#,
		AMOUNT_TOTAL = #amountTotal#,
		AUTO_PAY = #autoPay#,
		CHECK_NUMBER = #checkNumber#,
		COMMENTS = #comments#,
		COMMITMENT_TYPE = #commitmentType#,
		CURRENCY_CODE = #currencyCode#,
		END_DATE = #endDate#,
		FREQUENCY = #frequency#,
		LAST_ENTRY_DATE = #lastEntryDate#,
		NOTES = #notes#,
		PAYMENT_TYPE = #paymentType#,
		PLEDGE_CANCEL_DATE = #pledgeCancelDate#,
		PLEDGE_CANCEL_REASON = #pledgeCancelReason#,
		PLEDGE_DATE = #pledgeDate#,
		PLEDGE_STATUS = #pledgeStatus#,
		PROJECTED_DATE = #projectedDate#,
		RECURRING = #recurring#,
		SEND_ACKNOWLEDGMENT = #sendAcknowledgment#,
		START_DATE = #startDate#,
		STATUS = #status#,
		UPDATE_DATE = now(),
		ADDRESS_ID = #address.id#,
		EMAIL_ID = #email.id#,
		PAYMENT_SOURCE_ID = #paymentSource.id#,
		PERSON_ID = #person.id#,
		PHONE_ID = #phone.id#
		where COMMITMENT_ID = #id#
	</update>
	
	<statement id="SELECT_COMMITMENT_BY_SEARCH_TERMS" resultMap="COMMITMENT_RESULT" parameterClass="map">
		<include refid="SELECT_COMMITMENT_FRAGMENT"/>
		<isNotNull property="stringParams"> 
		   <iterate property="stringParams" conjunction="and" open="and" close="">
		   c.$stringParams[].key$ like #stringParams[].value#
		   </iterate>
		</isNotNull>
		<isNotNull property="nonStringParams"> 
		   <iterate property="nonStringParams" conjunction="and" open="and" close="">
		   c.$nonStringParams[].key$ = #nonStringParams[].value#
		   </iterate>
		</isNotNull>
		<isNotNull property="phoneParams"> 
		   and exists (
		    select * from PHONE sph where 
		    sph.PERSON_ID = p.PERSON_ID
		    <iterate property="phoneParams" conjunction="and" open="and" close="">
		    sph.$phoneParams[].key$ like #phoneParams[].value#
		    </iterate>
		   )
		</isNotNull>
		<isNotNull property="addressParams"> 
		   and exists (
		    select * from ADDRESS saddr where 
		    saddr.PERSON_ID = p.PERSON_ID
		    <iterate property="addressParams" conjunction="and" open="and" close="">
		    saddr.$addressParams[].key$ like #addressParams[].value#
		    </iterate>
		   )
		</isNotNull>
		<isNotNull property="emailParams"> 
		   and exists (
		    select * from EMAIL se where 
		    se.PERSON_ID = p.PERSON_ID
		    <iterate property="emailParams" conjunction="and" open="and" close="">
		    se.$emailParams[].key$ like #emailParams[].value#
		    </iterate>
		   )
		</isNotNull>
		<isNotNull property="customParams"> 
		   and exists (
		    select * from CUSTOM_FIELD scf where 
		   ((scf.ENTITY_ID = c.COMMITMENT_ID and scf.ENTITY_TYPE = 'commitment') or (scf.ENTITY_ID = p.PERSON_ID and scf.ENTITY_TYPE = 'person'))
		    <iterate property="customParams" conjunction="and" open="and" close="">
		    scf.FIELD_NAME = #customParams[].key# and scf.FIELD_VALUE like #customParams[].value#
		    </iterate>
		   )
		</isNotNull>
		
		
	</statement>
	
	

</sqlMap>