<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="CONSTITUENT">

	<resultMap id="CONSTITUENT_RESULT" class="com.orangeleap.tangerine.domain.Constituent" groupBy="id">
		<result property="id" column="CONSTITUENT_ID" jdbcType="BIGINT" />
		<result property="constituentType" column="CONSTITUENT_TYPE" jdbcType="VARCHAR" />
		<result property="createDate" column="CREATE_DATE" jdbcType="TIMESTAMP" />
		<result property="firstName" column="FIRST_NAME" jdbcType="VARCHAR" />
		<result property="lastName" column="LAST_NAME" jdbcType="VARCHAR" />
		<result property="legalName" column="LEGAL_NAME" jdbcType="VARCHAR" />
		<result property="loginId" column="LOGIN_ID" jdbcType="VARCHAR" />
		<result property="maritalStatus" column="MARITAL_STATUS" jdbcType="VARCHAR" />
		<result property="middleName" column="MIDDLE_NAME" jdbcType="VARCHAR" />
		<result property="naicsCode" column="NAICS_CODE" jdbcType="VARCHAR" />
		<result property="organizationName" column="ORGANIZATION_NAME" jdbcType="VARCHAR" />
		<result property="preferredPhoneType" column="PREFERRED_PHONE_TYPE" jdbcType="VARCHAR" />
		<result property="recognitionName" column="RECOGNITION_NAME" jdbcType="VARCHAR" />
		<result property="suffix" column="SUFFIX" jdbcType="VARCHAR" />
		<result property="title" column="TITLE" jdbcType="VARCHAR" />
		<result property="updateDate" column="UPDATE_DATE" jdbcType="TIMESTAMP" />
		<result property="accountNumber" column="ACCOUNT_NUMBER" jdbcType="BIGINT" />
        <result property="site" resultMap="SITE.SITE_NAME_RESULT" />

	</resultMap>

    <sql id="CONSTITUENT_COLS_FRAGMENT">
    	p.CONSTITUENT_ID, 
		p.CONSTITUENT_TYPE, p.CREATE_DATE, p.FIRST_NAME, p.LAST_NAME, p.LEGAL_NAME,
		p.LOGIN_ID, p.MARITAL_STATUS, p.MIDDLE_NAME, p.NAICS_CODE, p.ORGANIZATION_NAME,
		p.PREFERRED_PHONE_TYPE, p.RECOGNITION_NAME, p.SUFFIX, p.TITLE, p.UPDATE_DATE, p.SITE_NAME, p.ACCOUNT_NUMBER
    </sql>
    
	<sql id="SELECT_CONSTITUENT_FRAGMENT">
		select 
        <include refid="CONSTITUENT_COLS_FRAGMENT"/>
		from CONSTITUENT p
		where p.SITE_NAME = #siteName#
	</sql>
	
	<select id="SELECT_CONSTITUENT_BY_IDS_SITE" resultMap="CONSTITUENT_RESULT" parameterClass="map">
		<include refid="SELECT_CONSTITUENT_FRAGMENT"/>		 
		and p.CONSTITUENT_ID in 
		<iterate property="constituentIds" conjunction="," open="(" close=")">
			#constituentIds[]#
		</iterate>
	</select>
	
	<select id="SELECT_CONSTITUENT_BY_ACCOUNT_NUMBER" resultMap="CONSTITUENT_RESULT" parameterClass="map">
		<include refid="SELECT_CONSTITUENT_FRAGMENT"/>		 
		and p.ACCOUNT_NUMBER = #accountNumber# 
	</select>
	
	<select id="SELECT_ALL_CONSTITUENTS_BY_SITE" resultMap="CONSTITUENT_RESULT" parameterClass="string">
		<include refid="SELECT_CONSTITUENT_FRAGMENT"/>

	</select>

    <select id="SELECT_LIMITED_CONSTITUENTS_BY_SITE" resultMap="CONSTITUENT_RESULT" parameterClass="map">
        select
        <include refid="CONSTITUENT_COLS_FRAGMENT"/>,
        ISDONORTYPE(p.CONSTITUENT_ID,'majorDonor') as MAJOR_DONOR, ISDONORTYPE(p.CONSTITUENT_ID,'lapsedDonor') as LAPSED_DONOR
        <dynamic prepend=",">
        	<isNotEqual property="sortColumn" compareValue="major_donor">
	        	<isNotEqual property="sortColumn" compareValue="lapsed_donor">
        			IF ($sortColumn$ IS NULL or $sortColumn$ = '', 1, 0) AS isnull
        		</isNotEqual>
        	</isNotEqual>
        </dynamic>
        from CONSTITUENT p
        where p.SITE_NAME = #siteName#
        order by 
       	<isNotEqual property="sortColumn" compareValue="major_donor">
        	<isNotEqual property="sortColumn" compareValue="lapsed_donor">
				isnull ASC, 
       		</isNotEqual>
       	</isNotEqual>
		$sortColumn$ + '0' $sortDir$, $sortColumn$ $sortDir$ 
        limit $offset$,$limit$
    </select>
    
    <select id="SELECT_LIMITED_CONSTITUENTS_BY_ID_RANGE" resultMap="CONSTITUENT_RESULT" parameterClass="map">
        select
        <include refid="CONSTITUENT_COLS_FRAGMENT"/>
        from CONSTITUENT p
        where p.SITE_NAME = #siteName#
        and p.ACCOUNT_NUMBER &gt;= #fromId# and p.ACCOUNT_NUMBER &lt;= #toId# 
        order by p.ACCOUNT_NUMBER
        limit 5001
    </select>
    
    <select id="SELECT_CONSTITUENT_COUNT_BY_SITE" parameterClass="string" resultClass="int">
        select count(CONSTITUENT_ID) from CONSTITUENT where SITE_NAME = #value#
    </select>

	<select id="SELECT_CONSTITUENT_BY_LOGIN_ID_SITE" resultMap="CONSTITUENT_RESULT" parameterClass="map">
		<include refid="SELECT_CONSTITUENT_FRAGMENT"/>		 
		and p.LOGIN_ID = #loginId#
	</select>

	<insert id="INSERT_CONSTITUENT" parameterClass="com.orangeleap.tangerine.domain.Constituent">
		insert into CONSTITUENT (
		CONSTITUENT_TYPE, FIRST_NAME, LAST_NAME, LEGAL_NAME,
		LOGIN_ID, MARITAL_STATUS, MIDDLE_NAME, NAICS_CODE, ORGANIZATION_NAME,
		PREFERRED_PHONE_TYPE, RECOGNITION_NAME, SUFFIX, TITLE, CREATE_DATE, UPDATE_DATE, SITE_NAME, ACCOUNT_NUMBER)
		values (
		#constituentType#, #firstName#, #lastName#, #legalName#,
		#loginId#, #maritalStatus#, #middleName#,	#naicsCode#, #organizationName#,
		#preferredPhoneType#, #recognitionName#, #suffix#, #title#, now(), now(), #site.name#, if(#accountNumber# is null, GENERATEID(#site.name#), #accountNumber#) )
		<selectKey keyProperty="id" resultClass="long">
			SELECT LAST_INSERT_ID() AS value
		</selectKey>
	</insert>

	<update id="UPDATE_CONSTITUENT" parameterClass="com.orangeleap.tangerine.domain.Constituent">
		update CONSTITUENT
		set 
		CONSTITUENT_TYPE = #constituentType#,
		FIRST_NAME = #firstName#,
		LAST_NAME = #lastName#,
		LEGAL_NAME = #legalName#,
		LOGIN_ID = #loginId#,
		MARITAL_STATUS = #maritalStatus#,
		MIDDLE_NAME = #middleName#,
		NAICS_CODE = #naicsCode#,
		ORGANIZATION_NAME = #organizationName#,
		PREFERRED_PHONE_TYPE = #preferredPhoneType#,
		RECOGNITION_NAME = #recognitionName#,
		SUFFIX = #suffix#,
		TITLE = #title#,
		ACCOUNT_NUMBER = #accountNumber#,
		UPDATE_DATE = now()
		where CONSTITUENT_ID = #id# and SITE_NAME = #site.name#
	</update>
 	
	<statement id="SELECT_CONSTITUENT_BY_SEARCH_TERMS" resultMap="CONSTITUENT_RESULT" parameterClass="map">
	    select
		<include refid="CONSTITUENT_COLS_FRAGMENT"/> 
		from CONSTITUENT p
		where 
		p.SITE_NAME = #siteName#
		<isNotNull property="ignoreIds"> 
	       and p.CONSTITUENT_ID not in 
		   <iterate property="ignoreIds" conjunction="," open="(" close=")">
		      #ignoreIds[]#
		   </iterate>
		</isNotNull>
		<isNotNull property="stringParams"> 
		   <iterate property="stringParams" conjunction="and" open="and" close="">
		   p.$stringParams[].key$ like #stringParams[].value#
		   </iterate>
		</isNotNull>
		<isNotNull property="nonStringParams"> 
		   <iterate property="nonStringParams" conjunction="and" open="and" close="">
		   p.$nonStringParams[].key$ = #nonStringParams[].value#
		   </iterate>
		</isNotNull>
		<isNotNull property="phoneParams"> 
		   and exists (
		    select * from PHONE ph where 
		    ph.CONSTITUENT_ID = p.CONSTITUENT_ID
		    <iterate property="phoneParams" conjunction="and" open="and" close="">
		    ph.$phoneParams[].key$ like #phoneParams[].value#
		    </iterate>
		   )
		</isNotNull>
		<isNotNull property="addressParams"> 
		   and exists (
		    select * from ADDRESS saddr where 
		    saddr.CONSTITUENT_ID = p.CONSTITUENT_ID
		    <iterate property="addressParams" conjunction="and" open="and" close="">
		    saddr.$addressParams[].key$ like #addressParams[].value#
		    </iterate>
		   )
		</isNotNull>
		<isNotNull property="emailParams"> 
		   and exists (
		    select * from EMAIL e where 
		    e.CONSTITUENT_ID = p.CONSTITUENT_ID
		    <iterate property="emailParams" conjunction="and" open="and" close="">
		    e.$emailParams[].key$ like #emailParams[].value#
		    </iterate>
		   )
		</isNotNull>
		<isNotNull property="customParams"> 
		   and exists (
		    select * from CUSTOM_FIELD cf where 
		    cf.ENTITY_ID = p.CONSTITUENT_ID
		    and cf.ENTITY_TYPE = 'constituent'
		    <iterate property="customParams" conjunction="and" open="and" close="">
		    cf.FIELD_NAME = #customParams[].key# and cf.FIELD_VALUE like #customParams[].value#
		    </iterate>
		   )
		</isNotNull>
		<isNotNull property="additionalWhere"> 
			and $additionalWhere$
		</isNotNull>
		limit 200
	</statement>

	<statement id="SELECT_CONSTITUENT_BY_FIND_TERMS" resultMap="CONSTITUENT_RESULT" parameterClass="map">
	    select
		<include refid="CONSTITUENT_COLS_FRAGMENT"/> 
		from CONSTITUENT p
		where 
		p.SITE_NAME = #siteName#
		<isNotNull property="ignoreIds"> 
	       and p.CONSTITUENT_ID not in 
		   <iterate property="ignoreIds" conjunction="," open="(" close=")">
		      #ignoreIds[]#
		   </iterate>
		</isNotNull>
		<isNotNull property="stringParams"> 
		   <iterate property="stringParams" conjunction="and" open="and" close="">
		   p.$stringParams[].key$ = #stringParams[].value#
		   </iterate>
		</isNotNull>
		<isNotNull property="nonStringParams"> 
		   <iterate property="nonStringParams" conjunction="and" open="and" close="">
		   p.$nonStringParams[].key$ = #nonStringParams[].value#
		   </iterate>
		</isNotNull>
		<isNotNull property="phoneParams"> 
		   and exists (
		    select * from PHONE ph where 
		    ph.CONSTITUENT_ID = p.CONSTITUENT_ID
		    <iterate property="phoneParams" conjunction="and" open="and" close="">
		    ph.$phoneParams[].key$ = #phoneParams[].value#
		    </iterate>
		   )
		</isNotNull>
		<isNotNull property="addressParams"> 
		   and exists (
		    select * from ADDRESS saddr where 
		    saddr.CONSTITUENT_ID = p.CONSTITUENT_ID
		    <iterate property="addressParams" conjunction="and" open="and" close="">
		    saddr.$addressParams[].key$ = #addressParams[].value#
		    </iterate>
		   )
		</isNotNull>
		<isNotNull property="emailParams"> 
		   and exists (
		    select * from EMAIL e where 
		    e.CONSTITUENT_ID = p.CONSTITUENT_ID
		    <iterate property="emailParams" conjunction="and" open="and" close="">
		    e.$emailParams[].key$ = #emailParams[].value#
		    </iterate>
		   )
		</isNotNull>
		<isNotNull property="customParams"> 
		   and exists (
		    select * from CUSTOM_FIELD cf where 
		    cf.ENTITY_ID = p.CONSTITUENT_ID
		    and cf.ENTITY_TYPE = 'constituent'
		    <iterate property="customParams" conjunction="and" open="and" close="">
		    cf.FIELD_NAME = #customParams[].key# and cf.FIELD_VALUE = #customParams[].value#
		    </iterate>
		   )
		</isNotNull>
		<isNotNull property="additionalWhere"> 
			and $additionalWhere$
		</isNotNull>
		limit 200
	</statement>

</sqlMap>