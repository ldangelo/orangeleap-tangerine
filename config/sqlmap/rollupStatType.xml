<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="ROLLUP_STAT">

	<delete id="ROLLUP_DELETE_ROLLUP_VALUES_FOR_ATTRIBUTE_SERIES">
		delete from ROLLUP_VALUE 
		where 
		ROLLUP_ATTRIBUTE_ID = #rollupAttributeId#
		and ROLLUP_SERIES_ID = #rollupSeriesId# 
        and START_DATE &gt;= #startDate# 
        and END_DATE &lt;= #endDate#
        and SITE_NAME = #siteName#
		<isNotNull property="groupByValue"> 
        and GROUP_BY_VALUE = #groupByValue#
		</isNotNull> 
	</delete>

    <sql id="SELECT_INTO_RV_FRAG">
        insert into ROLLUP_VALUE (
            SITE_NAME,
            ROLLUP_SERIES_ID,
        	ROLLUP_ATTRIBUTE_ID,
        	START_DATE,
        	END_DATE,
        	GROUP_BY_VALUE,
        	CURRENCY_CODE,
        	COUNT_VALUE,        
        	SUM_VALUE,        
        	MIN_VALUE,       
        	MAX_VALUE        
        )
        select
            #siteName#,
        	#rollupSeriesId#,
        	#rollupAttributeId#,
        	#startDate#,
        	#endDate#,
 	</sql>

   

	<!-- 
	The iBatis query id corresponds to the RollupAttribute stat type.
	The first column in the queries is the group-by dimension value (e.g. CONSTITUENT_ID) which relates to the rollup attribute entity type (e.g. 'constituent').
	-->
	
	<!--  Constituent entity type stats -->
	
	<!-- e.g. fieldName = ADJUSTED_AMOUNT  -->
    <insert id="ROLLUP_GIFT_BY_CONSTITUENT" parameterClass="java.util.Map">
        <include refid="SELECT_INTO_RV_FRAG"/>
        		g.CONSTITUENT_ID,
        		g.CURRENCY_CODE,
            	COUNT(g.$fieldName$),
            	SUM(g.$fieldName$),
            	MIN(g.$fieldName$),
            	MAX(g.$fieldName$)
            from 
            	GIFT g	
        	where
        		g.DONATION_DATE &gt;= #startDate# and g.DONATION_DATE &lt;= #endDate#
        		and g.GIFT_STATUS = 'Paid' and g.GIFT_TYPE = 'MONETARY_GIFT'
			<isNotNull property="groupByRange1"> 
				and g.CONSTITUENT_ID between #groupByRange1# and #groupByRange2#
			</isNotNull> 
			<isNotNull property="groupByValue"> 
	        	and g.CONSTITUENT_ID = #groupByValue#
			</isNotNull> 
            group by 
        		g.CONSTITUENT_ID,
        		g.CURRENCY_CODE
        		
    </insert>

	<!-- e.g. fieldName = FAIR_MARKET_VALUE  -->
    <insert id="ROLLUP_GIFT_IN_KIND_BY_CONSTITUENT" parameterClass="java.util.Map">
        <include refid="SELECT_INTO_RV_FRAG"/>
        		gik.CONSTITUENT_ID,
        		gik.CURRENCY_CODE,
            	COUNT(gik.$fieldName$),
            	SUM(gik.$fieldName$),
            	MIN(gik.$fieldName$),
            	MAX(gik.$fieldName$)
            from 
            	GIFT_IN_KIND gik	
        	where
        		gik.DONATION_DATE &gt;= #startDate# and gik.DONATION_DATE &lt;= #endDate#
			<isNotNull property="groupByRange1"> 
				and gik.CONSTITUENT_ID between #groupByRange1# and #groupByRange2#
			</isNotNull> 
			<isNotNull property="groupByValue"> 
	        	and gik.CONSTITUENT_ID = #groupByValue#
			</isNotNull> 
            group by 
        		gik.CONSTITUENT_ID,
        		gik.CURRENCY_CODE
    </insert>

	<!-- 
		e.g. For Soft Gifts: customFieldName = 'onBehalfOf' (the custom field value contains a constituent_id in this case)  
	-->
    <insert id="ROLLUP_GIFT_DISTRO_LINE_AMOUNT_BY_CF_CONSTITUENT" parameterClass="java.util.Map">
        <include refid="SELECT_INTO_RV_FRAG"/>
        		cf.FIELD_VALUE,
        		g.CURRENCY_CODE,
            	COUNT(dl.AMOUNT),
            	SUM(dl.AMOUNT),
            	MIN(dl.AMOUNT),
            	MAX(dl.AMOUNT)
            from 
            	GIFT g, DISTRO_LINE dl, CUSTOM_FIELD cf
        	where
        		g.DONATION_DATE &gt;= #startDate# and g.DONATION_DATE &lt;= #endDate#
        		and g.GIFT_ID = dl.GIFT_ID
        		and cf.ENTITY_ID = dl.DISTRO_LINE_ID and cf.ENTITY_TYPE='distributionline' and cf.FIELD_NAME= #customFieldName#  
        		and g.GIFT_STATUS = 'Paid' and g.GIFT_TYPE = 'MONETARY_GIFT'
        		and cf.FIELD_VALUE is not null
			<isNotNull property="groupByRange1"> 
				and CONVERT(cf.FIELD_VALUE, decimal(19)) between #groupByRange1# and #groupByRange2#
			</isNotNull> 
			<isNotNull property="groupByValue"> 
	        	and cf.FIELD_VALUE = #groupByValue#
			</isNotNull> 
            group by 
        		cf.FIELD_VALUE,
        		g.CURRENCY_CODE
    </insert>
   
   
    <insert id="ROLLUP_PLEDGE_SCHEDULED_PAYMENTS_BY_CONSTITUENT" parameterClass="java.util.Map">
         <include refid="SELECT_INTO_RV_FRAG"/>
        		p.CONSTITUENT_ID,
        		p.CURRENCY_CODE,
            	COUNT(it.SCHEDULED_ITEM_AMOUNT),
            	SUM(it.SCHEDULED_ITEM_AMOUNT),
            	MIN(it.SCHEDULED_ITEM_AMOUNT),
            	MAX(it.SCHEDULED_ITEM_AMOUNT)
            from 
            	PLEDGE p, SCHEDULED_ITEM it	
        	where
        		it.ACTUAL_SCHEDULED_DATE &gt;= #startDate# and it.ACTUAL_SCHEDULED_DATE &lt;= #endDate#
        		and p.PLEDGE_ID = it.SOURCE_ENTITY_ID and it.SOURCE_ENTITY = 'pledge'
        		and it.COMPLETION_DATE is null 
			<isNotNull property="groupByRange1"> 
				and p.CONSTITUENT_ID between #groupByRange1# and #groupByRange2#
			</isNotNull> 
			<isNotNull property="groupByValue"> 
	        	and p.CONSTITUENT_ID = #groupByValue#
			</isNotNull> 
            group by 
        		p.CONSTITUENT_ID,
        		p.CURRENCY_CODE
    </insert>
    
    <insert id="ROLLUP_RECURRING_GIFT_SCHEDULED_PAYMENTS_BY_CONSTITUENT" parameterClass="java.util.Map">
         <include refid="SELECT_INTO_RV_FRAG"/>
        		rg.CONSTITUENT_ID,
        		rg.CURRENCY_CODE,
            	COUNT(it.SCHEDULED_ITEM_AMOUNT),
            	SUM(it.SCHEDULED_ITEM_AMOUNT),
            	MIN(it.SCHEDULED_ITEM_AMOUNT),
            	MAX(it.SCHEDULED_ITEM_AMOUNT)
            from 
            	RECURRING_GIFT rg, SCHEDULED_ITEM it	
        	where
        		it.ACTUAL_SCHEDULED_DATE &gt;= #startDate# and it.ACTUAL_SCHEDULED_DATE &lt;= #endDate#
        		and rg.RECURRING_GIFT_ID = it.SOURCE_ENTITY_ID and it.SOURCE_ENTITY = 'recurringgift'
        		and it.COMPLETION_DATE is null 
			<isNotNull property="groupByRange1"> 
				and rg.CONSTITUENT_ID between #groupByRange1# and #groupByRange2#
			</isNotNull> 
			<isNotNull property="groupByValue"> 
	        	and rg.CONSTITUENT_ID = #groupByValue#
			</isNotNull> 
            group by 
        		rg.CONSTITUENT_ID,
        		rg.CURRENCY_CODE
    </insert>
   
   
   
    
    <!-- Non-constituent entity types (rollup dimensions) -->
    
    
	<!-- 
		e.g. fieldName = PROJECT_CODE rollup for all gifts in date range
	-->
    <insert id="ROLLUP_GIFT_DISTRO_LINE_AMOUNT_BY_DISTRO_LINE_FIELD" parameterClass="java.util.Map">
        <include refid="SELECT_INTO_RV_FRAG"/>
        		dl.$fieldName$,
        		g.CURRENCY_CODE,
            	COUNT(dl.AMOUNT),
            	SUM(dl.AMOUNT),
            	MIN(dl.AMOUNT),
            	MAX(dl.AMOUNT)
            from 
            	GIFT g, DISTRO_LINE dl
        	where
        		g.DONATION_DATE &gt;= #startDate# and g.DONATION_DATE &lt;= #endDate#
        		and g.GIFT_ID = dl.GIFT_ID
        		and g.GIFT_STATUS = 'Paid' and g.GIFT_TYPE = 'MONETARY_GIFT'
            group by 
        		dl.$fieldName$,
        		g.CURRENCY_CODE
    </insert>
    
    <insert id="ROLLUP_PLEDGE_SCHEDULED_PAYMENTS_BY_ALL" parameterClass="java.util.Map">
         <include refid="SELECT_INTO_RV_FRAG"/>
        		'ALL',
        		p.CURRENCY_CODE,
            	COUNT(it.SCHEDULED_ITEM_AMOUNT),
            	SUM(it.SCHEDULED_ITEM_AMOUNT),
            	MIN(it.SCHEDULED_ITEM_AMOUNT),
            	MAX(it.SCHEDULED_ITEM_AMOUNT)
            from 
            	PLEDGE p, SCHEDULED_ITEM it
        	where
        		it.ACTUAL_SCHEDULED_DATE &gt;= #startDate# and it.ACTUAL_SCHEDULED_DATE &lt;= #endDate#
        		and p.PLEDGE_ID = it.SOURCE_ENTITY_ID and it.SOURCE_ENTITY = 'pledge'
        		and it.COMPLETION_DATE is null 
            group by 
        		'ALL',
        		p.CURRENCY_CODE
    </insert>
     
    <insert id="ROLLUP_RECURRING_GIFT_SCHEDULED_PAYMENTS_BY_ALL" parameterClass="java.util.Map">
         <include refid="SELECT_INTO_RV_FRAG"/>
        		'ALL',
        		rg.CURRENCY_CODE,
            	COUNT(it.SCHEDULED_ITEM_AMOUNT),
            	SUM(it.SCHEDULED_ITEM_AMOUNT),
            	MIN(it.SCHEDULED_ITEM_AMOUNT),
            	MAX(it.SCHEDULED_ITEM_AMOUNT)
            from 
            	RECURRING_GIFT rg, SCHEDULED_ITEM it
        	where
        		it.ACTUAL_SCHEDULED_DATE &gt;= #startDate# and it.ACTUAL_SCHEDULED_DATE &lt;= #endDate#
        		and rg.RECURRING_GIFT_ID = it.SOURCE_ENTITY_ID and it.SOURCE_ENTITY = 'recurringgift'
        		and it.COMPLETION_DATE is null 
            group by 
        		'ALL',
        		rg.CURRENCY_CODE
    </insert>
     
    <!-- 
    The issue with rolling up scheduled pledges by project code is that the scheduled amounts are totals for all distro lines on the pledges; they are not broken out.
    So it would not work unless there was also a limit of 1 distro line per pledge.  The below might be an alternative - break out by pledge custom field 
    -->

    <insert id="ROLLUP_PLEDGE_SCHEDULED_PAYMENTS_BY_PLEDGE_CF" parameterClass="java.util.Map">
         <include refid="SELECT_INTO_RV_FRAG"/>
        		cf.FIELD_VALUE,
        		p.CURRENCY_CODE,
            	COUNT(it.SCHEDULED_ITEM_AMOUNT),
            	SUM(it.SCHEDULED_ITEM_AMOUNT),
            	MIN(it.SCHEDULED_ITEM_AMOUNT),
            	MAX(it.SCHEDULED_ITEM_AMOUNT)
            from 
            	PLEDGE p, SCHEDULED_ITEM it, CUSTOM_FIELD cf
        	where
        		it.ACTUAL_SCHEDULED_DATE &gt;= #startDate# and it.ACTUAL_SCHEDULED_DATE &lt;= #endDate#
        		and p.PLEDGE_ID = it.SOURCE_ENTITY_ID and it.SOURCE_ENTITY = 'pledge'
        		and it.COMPLETION_DATE is null 
        		and cf.ENTITY_ID = p.PLEDGE_ID and cf.ENTITY_TYPE='pledge' and cf.FIELD_NAME= #customFieldName#   
            group by 
        		cf.FIELD_VALUE,
        		p.CURRENCY_CODE
    </insert>
     
    <!-- Second-level rollups based on other rollup values -->
    
    <sql id="SELECT_SECOND_LEVEL_INTO_RV_FRAG">
        insert into ROLLUP_VALUE (
            SITE_NAME,
            ROLLUP_SERIES_ID,
        	ROLLUP_ATTRIBUTE_ID,
        	START_DATE,
        	END_DATE,
        	GROUP_BY_VALUE,
        	CURRENCY_CODE,
        	COUNT_VALUE,        
        	SUM_VALUE,        
        	MIN_VALUE,       
        	MAX_VALUE        
        )
        select
            #siteName#,
        	#rollupSeriesId#,
        	#rollupAttributeId#,
        	#startDate#,
        	#endDate#,
       		rv.GROUP_BY_VALUE,
       		rv.CURRENCY_CODE,
           	SUM(rv.COUNT_VALUE),
           	SUM(rv.SUM_VALUE),
           	MIN(rv.MIN_VALUE),
           	MAX(rv.MAX_VALUE)
        from 
           	ROLLUP_VALUE rv,
           	ROLLUP_ATTRIBUTE ra
       	where
       		ra.ROLLUP_ATTRIBUTE_ID = rv.ROLLUP_ATTRIBUTE_ID 
       		and rv.ROLLUP_SERIES_ID = #rollupSeriesId#
       		and rv.START_DATE = #startDate# and rv.END_DATE = #endDate#
			<isNotNull property="groupByValue"> 
	        and rv.GROUP_BY_VALUE = #groupByValue#
			</isNotNull> 
 	</sql>
    
    <insert id="ROLLUP_ACTUALS_BY_CONSTITUENT" parameterClass="java.util.Map">
        <include refid="SELECT_SECOND_LEVEL_INTO_RV_FRAG"/>
        		and ra.ATTRIBUTE_NAME_ID in ('Gift Amount','Gift In Kind Amount','Soft Gift Amount')
			<isNotNull property="groupByRange1"> 
				and CONVERT(rv.GROUP_BY_VALUE, decimal(19)) between #groupByRange1# and #groupByRange2#
			</isNotNull> 
            group by 
        		rv.GROUP_BY_VALUE,
        		rv.CURRENCY_CODE
    </insert>

    <insert id="ROLLUP_PROJECTEDS_BY_CONSTITUENT" parameterClass="java.util.Map">
        <include refid="SELECT_SECOND_LEVEL_INTO_RV_FRAG"/>
        		and ra.ATTRIBUTE_NAME_ID in ('Projected Pledge Amount','Projected Recurring Gift Amount')
 			<isNotNull property="groupByRange1"> 
				and CONVERT(rv.GROUP_BY_VALUE, decimal(19)) between #groupByRange1# and #groupByRange2#
			</isNotNull> 
            group by 
        		rv.GROUP_BY_VALUE,
        		rv.CURRENCY_CODE
    </insert>

</sqlMap>

