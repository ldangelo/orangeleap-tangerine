<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow
                          http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">

    <input name="batchId" type="long"/>

    <view-state id="batchStep1">
        <on-entry>
            <evaluate expression="batchSelectionAction.step1FindBatchInfo(flowRequestContext, requestParameters.batchId)" result="flowScope.model"/>
        </on-entry>
        <transition on="step1" to="batchStep1"/> <!-- if reloading the current page -->
        <transition on="step2" to="batchStep2"/>
        <transition on="cancel" to="batchCancelled"/>
    </view-state>

    <view-state id="batchStep2">
        <on-entry>
            <evaluate expression="batchSelectionAction.step2FindSegmentations(flowRequestContext, requestParameters.batchType,
                requestParameters.pickedIds, requestParameters.notPickedIds, requestParameters.batchDesc,
                requestParameters.sort, requestParameters.dir, requestParameters.limit, requestParameters.start)"
                      result="flowScope.model"/>
        </on-entry>
        <transition on="step1" to="batchStep1"/>
        <transition on="step2" to="batchStep2"/> <!-- if reloading the current page -->
        <transition on="step3" to="batchStep3"/>
        <transition on="cancel" to="batchCancelled"/>
    </view-state>

    <view-state id="batchStep3">
        <on-entry>
            <evaluate expression="batchSelectionAction.step3FindRowsForSegmentations(flowRequestContext,
                requestParameters.pickedIds, requestParameters.notPickedIds, requestParameters.sort,
                requestParameters.dir, requestParameters.limit, requestParameters.start)"
                    result="flowScope.model"/>
        </on-entry>
        <transition on="step1" to="batchStep1"/>
        <transition on="step2" to="batchStep2"/>
        <transition on="step3" to="batchStep3"/> <!-- if reloading the current page -->
        <transition on="step4" to="batchStep4"/>
        <transition on="cancel" to="batchCancelled"/>
    </view-state>

    <view-state id="batchStep4">
        <on-entry>
            <evaluate expression="batchSelectionAction.step4FindBatchUpdateFields(flowRequestContext)"
                      result="flowScope.model"/>
        </on-entry>
        <transition on="step1" to="batchStep1"/>
        <transition on="step2" to="batchStep2"/>
        <transition on="step3" to="batchStep3"/>
        <transition on="step4" to="batchStep4"/> <!-- if reloading the current page -->
        <transition on="step5" to="batchStep5"/>
        <transition on="cancel" to="batchCancelled"/>
    </view-state>

    <view-state id="batchStep5">
        <on-entry>
            <evaluate expression="batchSelectionAction.step5ReviewUpdates(flowRequestContext, requestParameters.sort,
                    requestParameters.dir, requestParameters.limit, requestParameters.start)"
                      result="flowScope.model"/>
        </on-entry>
        <transition on="step1" to="batchStep1"/>
        <transition on="step2" to="batchStep2"/>
        <transition on="step3" to="batchStep3"/>
        <transition on="step4" to="batchStep4"/>
        <transition on="step5" to="batchStep5"/> <!-- if reloading the current page -->
        <transition on="save" to="batchFinished"/>
        <transition on="cancel" to="batchCancelled"/>
    </view-state>

    <end-state id="batchFinished">
        <on-entry>
            <evaluate expression="batchSelectionAction.saveBatch(flowRequestContext)" result="flowScope.model"/>
        </on-entry>
    </end-state>
    
    <end-state id="batchCancelled">
        <on-entry>
            <evaluate expression="batchSelectionAction.cancelBatch(flowRequestContext)" result="flowScope.model"/>
        </on-entry>
    </end-state>

</flow>
        
        <!-- If not specified, the start state is the first state specified. -->
        <!--<view-state id="viewCart" view="viewcart">-->
            <!-- cart is available to SWF but not stored on the session under that-->
                 <!--name when using AOP proxy -->
            <!--<on-render>-->
                <!-- Carry cart from Spring app context to request scope -->
                <!--<set name="requestScope.shoppingCart" value="shoppingCart"/>-->
                <!--<set name="requestScope.recommendations" value="cartService.recommendations"/>-->
            <!--</on-render>-->
            <!--<transition on="addToCart" to="addProductToCart"/>-->
            <!--<transition on="register" to="register"/>-->
            <!--<transition on="login" to="login"/>-->
        <!--</view-state>-->

        <!--<subflow-state id="addProductToCart" subflow="addToCart">-->
            <!-- This is where we go when the subflow returns. productAdded is-->
                 <!--the name of an end-state. -->
            <!--<transition on="productAdded" to="viewCart"/>-->
        <!--</subflow-state>-->

        <!-- New customers create a new account before moving forward -->
        <!--<subflow-state id="register" subflow="register">-->
            <!--<transition on="accountAdded" to="paymentAndShipmentOptions"/>-->
            <!--<transition on="cancelRegistration" to="viewCart"/>-->
        <!--</subflow-state>-->

        <!-- Existing customers log in before moving forward -->
        <!--<subflow-state id="login" subflow="login">-->
            <!-- This is where we go when the subflow returns. productAdded is-->
                 <!--the name of an end-state. -->
            <!--<transition on="loginOk" to="paymentAndShipmentOptions"/>-->
        <!--</subflow-state>-->

        <!-- Payment and shipment options -->
        <!--<view-state id="paymentAndShipmentOptions" view="options">-->
            <!--<transition on="submit" to="confirmOrder"/>-->
            <!--<transition on="back" to="viewCart"/>-->
        <!--</view-state>-->

        <!-- Confirm order -->
        <!--<view-state id="confirmOrder" view="confirmorder">-->
            <!--<on-render>-->
                <!--<set name="requestScope.shoppingCart" value="shoppingCart"/>-->
            <!--</on-render>-->
            <!--<transition on="continue" to="thankYou">-->
                <!--<evaluate expression="cartService.submitOrderForPayment()"/>-->
            <!--</transition>-->
        <!--</view-state>-->

        <!-- Thank you page -->
        <!--<view-state id="thankYou" view="thanks">-->
            <!--<transition on="continue" to="shop"/>-->
        <!--</view-state>-->

        <!-- Exit the flow, letting the user return to shopping -->
        <!--<end-state id="shop" view="externalRedirect:contextRelative:/home.do"/>-->

        <!--<global-transitions>-->
            <!--<transition on="cancelCheckout" to="shop"/>-->
        <!--</global-transitions>-->
<!--<?xml version="1.0" encoding="UTF-8"?>-->
<!--<beans xmlns="http://www.springframework.org/schema/beans"-->
       <!--xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"-->
       <!--xmlns:webflow="http://www.springframework.org/schema/webflow-config"-->
       <!--xsi:schemaLocation="-->
           <!--http://www.springframework.org/schema/beans-->
           <!--http://www.springframework.org/schema/beans/spring-beans-2.5.xsd-->
           <!--http://www.springframework.org/schema/webflow-config-->
           <!--http://www.springframework.org/schema/webflow-config/spring-webflow-config-2.0.xsd">-->

	<!-- Executes flows: the entry point into the Spring Web Flow system -->
	<!--<webflow:flow-executor id="flowExecutor">-->
		<!--<webflow:flow-execution-listeners>-->
			<!--<webflow:listener ref="jpaFlowExecutionListener" />-->
			<!--<webflow:listener ref="securityFlowExecutionListener" />-->
		<!--</webflow:flow-execution-listeners>-->
	<!--</webflow:flow-executor>-->

	<!-- The registry of executable flow definitions -->
	<!--<webflow:flow-registry id="flowRegistry" flow-builder-services="flowBuilderServices" base-path="/WEB-INF">-->
		<!--<webflow:flow-location-pattern value="/**/*-flow.xml" />-->
	<!--</webflow:flow-registry>-->

	<!-- Plugs in a custom creator for Web Flow views -->
	<!--<webflow:flow-builder-services id="flowBuilderServices" view-factory-creator="mvcViewFactoryCreator" conversion-service="conversionService" development="true" />-->

	<!-- Configures Web Flow to use Tiles to create views for rendering; Tiles allows for applying consistent layouts to your views -->
	<!--<bean id="mvcViewFactoryCreator" class="org.springframework.webflow.mvc.builder.MvcViewFactoryCreator">-->
		<!--<property name="viewResolvers" ref="tilesViewResolver"/>-->
		<!--<property name="useSpringBeanBinding" value="true" />-->
	<!--</bean>-->

	<!-- Installs a listener that manages JPA persistence contexts for flows that require them -->
	<!--<bean id="jpaFlowExecutionListener" class="org.springframework.webflow.persistence.JpaFlowExecutionListener">-->
		<!--<constructor-arg ref="entityManagerFactory" />-->
		<!--<constructor-arg ref="transactionManager" />-->
	<!--</bean>-->

	<!-- Installs a listener to apply Spring Security authorities -->
	<!--<bean id="securityFlowExecutionListener" class="org.springframework.webflow.security.SecurityFlowExecutionListener" />-->

<!--</beans>-->